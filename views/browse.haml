%html
	%head 
		%link{href: "//netdna.bootstrapcdn.com/bootswatch/2.3.1/spruce/bootstrap.min.css", rel:"stylesheet" }
		%script{src: "jquery.js"}
		%script{src: "finch.js"}
		:css
			li {
				margin-left: 40px;
			}

			.destroy-link {
				visibility:hidden;
			}

			li:hover > .destroy-link {
				visibility: visible;
			}

			a {
				cursor:pointer;
			}
			
	%body
		.container
			%h1.row.page-header 
				AidDataFS
				%small Project-level document storage
			
			%p.row To upload, enter a path, then choose a file. Authentication required.
			%p.row
				Upload to 
				%b Root/
				%input{ onkeyup: "$('#upload').attr('action', 'files/'+ this.value);" }
			%form#upload.row{ action: '', method: "post", :enctype=>"multipart/form-data"}
				%input{type: "file", name: "file"}
				%input{type: "submit", class: "btn btn-primary"}

			#files 
				%i.icon-folder-close
				%a{href: "#", onclick: "App.navigate_to('files')"}
					Root
				%ul.children.unstyled


	:coffeescript

		@App = @App || {}

		@log = (args...) -> console.log a for a in args
		App.current_namespace = ''

		App.navigate_to = (urllike_id) ->
			url = urllike_id.replace(/--/g, '/')
			Finch.navigate "/" + url
			App.open(urllike_id)



		App.open = (urllike_id) ->
			url = urllike_id.replace(/--/g, '/')
			# naming convention -- an element's ID is the same as it's path, with -- instead of /
			
			# this_element is the <li>
			this_element = $('#'+urllike_id)
			log this_element
			# get its children, if they're there, and close them.
			this_element.children('.icon-folder-close').removeClass('icon-folder-close').addClass('icon-folder-open')

			# if its a document...
			if this_element.hasClass("document")
				log "Getting a document"
				window.open(url)
			else
				$.get(url, (data) -> print_data_from(urllike_id, data) )

			
			print_data_from = (urllike_id, data) ->
				data = $.parseJSON(data)
				log "data", data

				target = $('#'+urllike_id+' .children')
				menu = ("<li id='"+urllike_id+"--"+d.key+"' class='" + d.type + "'>" +
							
							(if d.type is 'document'
								"<img style='margin:4px;' src='"+d.icon+"' />" 
							else 
								"<i class='icon-folder-close'></i>") +
							
							"<a onclick=\"App.navigate_to('"+urllike_id+"--"+d.key+"')\">" + 
							d.name + 
							"</a>" +

							(if d.type is "namespace"
								" ("+d.project_count+")"
							else if d.type is "project"
								" ("+d.document_count+")"
							else 
								""
							) +

							"<a class='destroy-link' onclick=\"App.destroy('"+urllike_id+"--"+d.key+"')\" >
								<i class='icon-trash'></i>
							</a>" +
							"<ul class='children unstyled'></ul>
						</li>" for d in data.contents).join("") 

				# console.log menu
				target.html menu

		App.destroy = (urllike_id) ->
			url = urllike_id.replace(/--/g, '/') 
			if  confirm("Are you sure you want to delete this "+$('#'+urllike_id).attr("class") + "? ("+url+")")
				$.ajax({
					url: url,
					type: "DELETE"
					success: (data) ->
						console.log data
						data = $.parseJSON(data)
						if !data["error"]
							$('#'+urllike_id).remove()
						else
							alert("Uh oh -- this delete failed." +
								"\nTry:\n\t- Removing all contents from folders \n\t- Making sure you're properly signed in." +
								"\n\nError: "+data["error"] + 
								"\nURL: "+url)
					})


		Finch.route "/", () ->
			log "Called home"
			Finch.navigate "/files"

		Finch.route "/files", (bindings, child_callback) ->
			App.open("files")
			child_callback()

		Finch.route "[/files]/:namespace", (bindings, child_callback) ->
			App.open("files--"+bindings.namespace)
			child_callback()

		Finch.route "[/files/:namespace]/:project", (bindings) ->
			App.open("files--"+bindings.namespace+"--"+bindings.project)



		Finch.listen()
